Або якщо ви хочете перевірити своє ім'я та електронну адресу, виконайте наступні команди:
git config --global user.name
git config --global user.email
якщо ви хочете додати свою електронну адресу, ви можете ввести наступну команду:
git config --global user.email "youremail@example.com"




Нижче перераховані деякі з найбільш часто використовуваних команд Git:

* git init - створює новий репозиторій Git.
git clone - створює копію віддаленого репозиторію на вашому локальному комп'ютері.
git add - додає змінені або нові файли до стадії.
git commit - зберігає зміни, додані до стадії, в історію репозиторію.
git status - показує стан робочого каталогу та стадії.
git push - відправляє локальні зміни на віддалений репозиторій.
git pull - завантажує зміни з віддаленого репозиторію та зливає їх з локальними змінами.
git branch - переглядає, створює або видаляє гілки.
git checkout - перемикає між гілками та комітами.
git merge - зливає зміни з іншої гілки в поточну гілку.
git fetch - завантажує зміни з віддаленого репозиторію без злиття їх з локальними змінами.
git log - виводить історію комітів.
Це далеко не повний список команд, які можна використовувати з Git, але вони є найбільш корисними та часто використовуваними. Ви можете отримати детальну довідку про будь-яку команду Git, використавши команду git help або git <command> --help.

Звичайно, ось додаткові команди Git:

git diff - показує різницю між робочою копією та стадією.
git tag - додає, переглядає або видаляє теги.
git reset - відкочує зміни до попереднього коміту.
git revert - створює новий коміт, що скасовує попередній коміт.
git rm - видаляє файли з репозиторію та з робочого каталогу.
git stash - зберігає зміни в буфері, щоб їх можна було відновити пізніше.
git show - показує інформацію про коміт, тег, гілку або файли.
git remote - переглядає або змінює віддалені репозиторії.
* git config - переглядає або змінює налаштування Git.






z:\ext4_500\C++_\GIT\Git - Курс по Git и GitHub\

9 Обзор основных команд в Терминале_720p

**************************************************************************************

https://www.youtube.com/@FPSFirePlanetStudio/playlists
https://www.youtube.com/watch?v=jmRecGiVlYU&list=PLD_r24956Aq4VneZ6855AYEy1RSmAYjTi


ПАПКА З ДОМАШНІМ ЗАВДАННЯМ:
https://drive.google.com/drive/folders/1VOBk6kdt1KMnFBI_PtqfqQ1NqOsp1wPg

C++ Теорія
https://www.youtube.com/watch?v=3ZGHePIN3Aw&list=PLiPRE8VmJzOpn6PzYf0higmCEyGzo2A5g&index=9

C++ Практика
https://www.youtube.com/watch?v=iWY-LScoI-k&list=PLiPRE8VmJzOon2WCgoceDHxYeuToI6m2K&index=10


C++ Теорія. Урок 10. RAW рядки
C++ Теорія. Урок 15. Літерал
C++ Теорія. Урок 16. Коментарі
C++ Теорія. Урок 18. Арифметичні оператори
C++ Теорія. Урок 21. Комбіновані арифметичні оператори
C++ Теорія. Урок 22. Інкремент і дикремент
C++ Теорія. Урок 28. if
*** C++ Теорія. Урок 44. Область видимості, глобальні-локальні дані, static-extern
C++ Теорія. Урок 48. Перезавантаження функцій
C++ Теорія. Урок 50. Лінійний пошук
C++ Теорія. Урок 53. Сортування вставками
C++ Теорія. Урок 55. Швидке сортування
C++ Теорія. Урок 57. Вказівники. Частина 1
C++ Теорія. Урок 60. new i delete
C++ Теорія. Урок 61. L-Value i R-Value
C++ Теорія. Урок 63. struct
C++ Теорія. Урок 65. enum
C++ Теорія. Урок 67. Псевдоніми using
C++ Теорія. Урок 70. Бітові оператори
C++ Теорія. Урок 76. Попередньо визначені макроси
C++ Теорія. Урок 77. pragma
C++ Теорія. Урок 78. Заголовкові файли
C++ Теорія. Урок 79. Стандартна бібліотека C++
C++ Теорія. Урок 81. Файл climits
C++ Теорія. Урок 85. Файл cerrno
C++ Теорія. Урок 86. Файл ctime
C++ Теорія. Урок 90. Файл cstdarg
C++ Теорія. Урок 92. Файл clocale
C++ Теорія. Урок 94. Класи, Об'єкти, Поля, Методи
C++ Теорія. Урок 95. Константні методи
C++ Теорія. Урок 97. Деструктор
C++ Теорія. Урок 100. Конструктор переносу
C++ Теорія. Урок 101. Дружні класи, дружні функції
C++ Теорія. Урок 104. mutable
C++ Теорія. Урок 105. goto
C++ Теорія. Урок 106. namespace
C++ Теорія. Урок 107. register
C++ Теорія. Урок 110. Перезавантаження операторів. Вступ
C++ Теорія. Урок 111. Перезавантаження арифметичних операторів
C++ Теорія. Урок 114. Перезавантаження комбінованих операторів
*** C++ Теорія. Урок 115. Перезавантаження індексатора
*** C++ Теорія. Урок 116. Перезавантаження оператора приведення типу
*** C++ Теорія. Урок 118. Перезавантаження операторів адресації
*** C++ Теорія. Урок 119. Методи за замовчуванням
C++ Теорія. Урок 121. Шаблони класів
C++ Теорія. Урок 124. unique_ptr
C++ Теорія. Урок 125. shared_ptr
* C++ Теорія. Урок 126. weak_ptr
C++ Теорія. Урок 128. Поліморфізм
C++ Теорія. Урок 129. Абстракція
C++ Теорія. Урок 133. reinterpret_cast
C++ Теорія. Урок 134. typeid
C++ Теорія. Урок 135. Виключення
*** C++ Теорія. Урок 137. string
C++ Теорія. Урок 138. ADT Вступ
C++ Теорія. Урок 139. ADT Однозв'язний список
C++ Теорія. Урок 140. ADT Двозв'язний список
C++ Теорія. Урок 142. ADT Черга
C++ Теорія. Урок 144. ADT Бінарне дерево
C++ Теорія. Урок 145. auto
C++ Теорія. Урок 148. Лямбди
C++ Теорія. Урок 152. STL. vector
C++ Теорія. Урок 153. STL. list
C++ Теорія. Урок 155. STL. deque
C++ Теорія. Урок 156. STL. array
C++ Теорія. Урок 160. STL. set . multiset
C++ Теорія. Урок 161. STL. map. multimap
*** C++ Теорія. Урок 165. Файл random
** C++ Теорія. Урок 166. Робота з файлами (стиль мови C)




https://hackingcpp.com/cpp/cheat_sheets.html
https://uk.wikipedia.org/wiki/%D0%9E%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B8_%D0%B2_C_%D1%82%D0%B0_C++
https://godbolt.org/



auto function = [](int value) {std::cout << value << " ";};
std::cout << typeid(function).name() << std::endl; 












1. Як контролювати переповнення підчас виконання арихмитичних операцій;
2. Який тип використовувати для зберігання числа 123456789012345,31? 
Можливо існує тип з фіксованою комою?
3. Як працювати з гіганськими таблицями баз даних не напрягаючи БД та щоб цього незамітив користувач? 
Як реалізувати аналог динамічного списку в BAF?
4. Зможите показати підхід реалізації роботи з БД де робота інтерфейсу не залежить від обраної БД?
За аналогом BAF де є : "Форма" <--> "Одиниця даних в оперативній памяті(Об'єкт)" <--> "Одиниця даних збережана в БД"? 
5. Правильна робота з Git?
6. Правильна організація великого проєкту по структурам, форам і т.д. як це зроблена наприклад в BAF? 
7. Правильна робота з проектом через make, cmake, qmake, ...?
8. Як писати та використовувати динамічні та статичні бібліотеки?


Старт: 09.03.2023 в 19:00 по Києву
https://itproger.com/ua/intensive/cpp


C++ розробник








